#!/usr/bin/env uv run python

"""
NRML Souffle Engine

Takes NRML JSON input and produces structured provenance output using Souffle Datalog.

Input: NRML JSON file with facts and instances
Output: JSON provenance with execution results and legal traceability
"""

import sys
import os
import subprocess
import json
import csv
from datetime import datetime
from pathlib import Path


def parse_csv(csv_path):
    """Parse Souffle CSV output file"""
    if not os.path.exists(csv_path):
        return []

    results = []
    with open(csv_path, 'r', encoding='utf-8') as f:
        reader = csv.reader(f, delimiter='\t')
        for row in reader:
            if row:  # Skip empty rows
                # Convert numeric strings to numbers
                parsed_row = []
                for cell in row:
                    try:
                        # Try integer first
                        parsed_row.append(int(cell))
                    except ValueError:
                        try:
                            # Try float
                            parsed_row.append(float(cell))
                        except ValueError:
                            # Keep as string
                            parsed_row.append(cell)
                results.append(parsed_row)
    return results


def extract_provenance():
    """Extract provenance from generated CSV files"""

    provenance = {
        'timestamp': datetime.now().isoformat(),
        'results': {},
        'provenance': {},
        'nrmlMapping': {
            'passagier_waarvoor_korting_van_toepassing_is': {
                'nrml_path': '#/facts/4c72dc9d-78d4-4f0b-a0cd-6037944f26ce/items/senior_rule/versions/0',
                'description': 'Senior eligibility rule - age >= 65',
                'legal_reference': 'Wet op de vliegbelasting, Artikel 3.2'
            },
            'te_betalen_belasting': {
                'nrml_path': '#/facts/tax_calculation/items/discount_rule/versions/0',
                'description': 'Tax calculation with senior discount',
                'legal_reference': 'Wet op de vliegbelasting, Artikel 4.1'
            }
        },
        'executionSummary': {}
    }

    # Find and process all CSV files
    csv_files = list(Path('.').glob('*.csv'))
    total_tuples = 0

    for csv_file in csv_files:
        relation_name = csv_file.stem
        tuples = parse_csv(csv_file)

        if tuples:
            provenance['results'][relation_name] = tuples
            total_tuples += len(tuples)

            # Generate provenance entries
            provenance['provenance'][relation_name] = []
            for i, tuple_data in enumerate(tuples, 1):
                mapping = provenance['nrmlMapping'].get(relation_name, {})
                provenance_entry = {
                    'tuple': tuple_data,
                    'ruleApplied': mapping.get('description', 'Generated by rule'),
                    'legalReference': mapping.get('legal_reference', 'Legal framework'),
                    'nrmlPath': mapping.get('nrml_path'),
                    'derivationStep': i
                }
                provenance['provenance'][relation_name].append(provenance_entry)

    # Generate execution summary
    provenance['executionSummary'] = {
        'totalRelations': len(provenance['results']),
        'totalTuples': total_tuples,
        'successful': total_tuples > 0,
        'relations': list(provenance['results'].keys())
    }

    # Generate analysis for known patterns
    if 'passagier_waarvoor_korting_van_toepassing_is' in provenance['results']:
        seniors = provenance['results']['passagier_waarvoor_korting_van_toepassing_is']
        provenance['analysis'] = {
            'seniorAnalysis': {
                'totalSeniors': len(seniors),
                'seniorIds': [senior[0] for senior in seniors],
                'eligibilityRule': 'Age >= 65 years'
            }
        }

        if 'te_betalen_belasting' in provenance['results']:
            taxes = provenance['results']['te_betalen_belasting']
            senior_ids = {senior[0] for senior in seniors}

            senior_taxes = [tax for tax in taxes if tax[0] in senior_ids]
            regular_taxes = [tax for tax in taxes if tax[0] not in senior_ids]

            provenance['analysis']['taxAnalysis'] = {
                'totalCalculations': len(taxes),
                'seniorDiscounts': len(senior_taxes),
                'regularRates': len(regular_taxes),
                'totalRevenue': sum(tax[1] for tax in taxes),
                'averageAmount': sum(tax[1] for tax in taxes) / len(taxes) if taxes else 0
            }

            # Individual tax breakdown
            provenance['analysis']['individualTaxes'] = []
            for tax in taxes:
                person_id, amount, category = tax
                reason = 'Senior citizen discount applied' if person_id in senior_ids else 'Standard rate applied'
                provenance['analysis']['individualTaxes'].append({
                    'person': person_id,
                    'amount': amount,
                    'category': category,
                    'reason': reason
                })

            # Cross-reference check
            provenance['analysis']['crossReference'] = {
                'seniorsWhoPayTax': [tax[0] for tax in senior_taxes],
                'nonSeniorsWhoPayTax': [tax[0] for tax in regular_taxes],
                'consistencyCheck': len(senior_taxes) == len(seniors)
            }

    return provenance


def main():
    """Main NRML Souffle Engine"""
    if len(sys.argv) < 2:
        print('üöÄ NRML Souffle Engine')
        print('======================')
        print('Usage: python3 scripts/engine-souffle.py <input.nrml.json> [output.json]')
        print('')
        print('Pipeline: NRML JSON ‚Üí Souffle Datalog ‚Üí Structured Provenance')
        print('')
        print('Examples:')
        print('  python3 scripts/engine-souffle.py test-senior-sample.nrml.json')
        print('  python3 scripts/engine-souffle.py example-simple.nrml.json results.json')
        sys.exit(1)

    input_file = sys.argv[1]
    output_file = sys.argv[2] if len(sys.argv) > 2 else 'souffle-provenance.json'
    dl_file = input_file.replace('.nrml.json', '.dl')

    print('üöÄ NRML Souffle Engine')
    print('======================')
    print(f'üì• Input:  {input_file}')
    print(f'üì§ Output: {output_file}')
    print('')

    if not os.path.exists(input_file):
        print(f'‚ùå Error: Input file not found: {input_file}')
        sys.exit(1)

    try:
        # Step 1: Transform NRML JSON to Souffle Datalog
        print('üîÑ Transforming NRML ‚Üí Souffle Datalog...')
        subprocess.run([
            './scripts/transform',
            'transformations/nrml-to-souffle.xsl',
            input_file,
            dl_file
        ], check=True, capture_output=True, text=True)

        # Step 2: Execute Souffle
        print('üß† Executing Souffle logic engine...')
        subprocess.run(['souffle', '-F.', dl_file], check=True, capture_output=True)

        # Step 3: Extract JSON provenance (integrated)
        print('üìä Extracting structured provenance...')
        provenance = extract_provenance()

        # Step 4: Save results
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(provenance, f, indent=2, ensure_ascii=False)

        # Step 5: Cleanup temporary CSV files
        csv_files = list(Path('.').glob('*.csv'))
        for csv_file in csv_files:
            csv_file.unlink()

        # Summary
        print('')
        print('‚úÖ Engine completed successfully!')
        print(f'üìä Results: {output_file}')
        print(f'üîç Datalog: {dl_file}')
        print(f'üìà Relations: {len(provenance["results"])} ({provenance["executionSummary"]["totalTuples"]} tuples)')

        # Show key results
        if 'analysis' in provenance:
            analysis = provenance['analysis']
            if 'seniorAnalysis' in analysis:
                print(f'üë• Seniors: {analysis["seniorAnalysis"]["totalSeniors"]}')
            if 'taxAnalysis' in analysis:
                print(f'üí∞ Total Revenue: ‚Ç¨{analysis["taxAnalysis"]["totalRevenue"]}')

    except subprocess.CalledProcessError as e:
        print(f'‚ùå Engine failed: Command {e.cmd} returned {e.returncode}')
        if e.stderr:
            print(f'Error details: {e.stderr}')
        sys.exit(1)
    except Exception as e:
        print(f'‚ùå Engine failed: {e}')
        sys.exit(1)


if __name__ == '__main__':
    main()
